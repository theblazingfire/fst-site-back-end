openapi: 3.0.0
info:
  title: Five and six technologies Apis Docs
  version: 1.0.0
  description: API documentation for FST Apis

tags:
  - name: Ping
    description: Endpoints for health check and logs management
  - name: Auth
    description: Endpoints for Authentications
  - name: Profile
    description: Endpoints for User Profile Management
  - name: Notifications
    description: Notification management
  - name: Transactions
    description: Transactions Endpoints for managing CRUD operations and paystack integration
  - name: Bootcamp
    description: Endpoint for managing student enrollment in our bootcamp
  - name: ServiceOrder
    description: Manage and track user orders for our services
  - name: CustomerSupport
    description: Manage Customer Feedback and Complaints
  - name: Chat
    description: Manage Chat and Inbox Functions

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Notification:
      type: object
      properties:
        id:
          type: string
          example: "60d21b4667d0d8992e610c85"
        title:
          type: string
          example: "New Message"
        message:
          type: string
          example: "You have a new message."
        userId:
          type: string
          example: "60d21b4667d0d8992e610c85"
        read:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: "2024-09-12T14:45:15.000Z"
    Auth:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address
        recoveryEmail:
          type: string
          format: email
          description: User's recovery email address
        hash:
          type: string
          description: Password hash
        disabled:
          type: boolean
          description: Is the account disabled
        deleted:
          type: boolean
          description: Is the account deleted
        created:
          type: string
          format: date-time
          description: Account creation date
        otp:
          type: string
          description: One-time password
        verified:
          type: boolean
          description: Is the account verified
        verifyTokenString:
          type: string
          description: Token string for account verification
        resetTokenString:
          type: string
          description: Token string for password reset

    Profile:
      type: object
      properties:
        id:
          type: string
          example: "507f191e810c19729de860ea"
        username:
          type: string
          example: "user90249"
        profileImage:
          type: string
          example: "https://example.com/image.jpg"
        email:
          type: string
          example: "user@example.com"
        createdAt:
          type: string
          format: date-time
          example: "2023-07-18T12:34:56Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-07-18T12:34:56Z"

    Transaction:
      type: object
      properties:
        transactionId:
          type: string
        paymentID:
          type: string
          default: ""
        for:
          type: string
        payer:
          type: string
          format: ObjectId
        userEmail:
          type: string
        paid:
          type: string
          enum: [unpaid, pending, paid]
        amount:
          type: number
        paymentMethod:
          type: string
          enum: [card, bank_transfer, ussd, wallet]
      required:
        - transactionId
        - for
        - payer
        - userEmail
        - paid
        - amount
        - paymentMethod

    Bootcamp:
      type: object
      properties:
        _id:
          type: string
          example: "64aef123abcd987654321"
        name:
          type: string
          example: "Frontend Bootcamp"
        start:
          type: string
          format: date
          example: "2024-08-15"
        end:
          type: string
          format: date
          example: "2024-09-15"
        student:
          type: object
          properties:
            _id:
              type: string
              example: "64aef456abcd987654322"
            name:
              type: string
              example: "John Doe"
            email:
              type: string
              example: "john@example.com"
        transactionId:
          type: string
          example: "TXN98765ABC"
        paymentId:
          type: string
          example: "PAY12345XYZ"
        paymentStatus:
          type: string
          enum: ["unpaid", "pending", "paid"]
          example: "paid"
        createdAt:
          type: string
          format: date-time
          example: "2024-07-28T12:34:56.789Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-07-29T14:22:30.123Z"
    ServiceOrder:
      type: object
      required:
        - user
        - service
        - packageType
        - amount
        - transactionId
        - paymentStatus
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the service order
        user:
          type: string
          format: uuid
          description: Reference to the user who placed the order
        service:
          type: string
          description: Name of the service requested
          example: "webDevelopment"
        packageType:
          type: string
          enum: ["regular", "standard", "premium"]
          description: Selected package type for the service
          example: "premium"
        amount:
          type: number
          format: float
          description: Price of the selected package
          example: 110000
        transactionId:
          type: string
          description: Unique transaction identifier for the order
          example: "abc123xyz456"
        paymentStatus:
          type: string
          enum: ["unpaid", "pending", "paid"]
          description: Current payment status of the service order
          example: "unpaid"
        paymentMethod:
          type: string
          description: Payment method used (if available)
          example: "credit_card"
        preferredCommunicationChannel:
          type: string
          description: Preferred method of communication
          example: "email"
        projectDetails:
          type: object
          description: Additional project-specific details
          properties:
            projectName:
              type: string
              description: Name of the project
              example: "E-commerce Website Redesign"
            description:
              type: string
              description: Brief project description
              example: "A complete redesign of an online store to improve UX"
            specialNotes:
              type: string
              description: Additional notes from the client
              example: "Ensure SEO optimization"
            estimatedDeliveryDate:
              type: string
              format: date
              description: Expected delivery date
              example: "2024-09-30"
            duration:
              type: string
              description: Estimated duration of the project
              example: "4 weeks"
            style:
              type: string
              description: Preferred style for the project
              example: "Minimalist"
            referenceLinks:
              type: array
              items:
                type: string
              description: List of reference links for inspiration
              example:
                ["https://example.com/design1", "https://example.com/design2"]
        setUpStop:
          type: boolean
          description: Indicates whether the service setup should be stopped
          example: false
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the order was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the order was last updated

paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: User Login
      description: Login a user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                role:
                  type: string
                  enum: ["user", "admin"]
              required:
                - email
                - password
                - role
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "400":
          description: Invalid input
        "401":
          description: Unauthorized

  /auth/forgot-password:
    post:
      tags:
        - Auth
      summary: Forgot Password
      description: Request a password reset link
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
      responses:
        "200":
          description: Reset link sent
        "400":
          description: Invalid input
        "404":
          description: Email not found

  /auth/reset-password:
    post:
      tags:
        - Auth
      summary: Reset Password
      description: Reset the password using a reset token
      parameters:
        - name: resetToken
          in: query
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
              required:
                - newPassword
      responses:
        "200":
          description: Password reset successful
        "400":
          description: Invalid input
        "401":
          description: Invalid or expired reset token

  /auth/update:
    put:
      tags:
        - Auth
      summary: Update User Details
      description: Update email, password, and recovery email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                recoveryEmail:
                  type: string
                  format: email
      responses:
        "200":
          description: User details updated
        "400":
          description: Invalid input
        "401":
          description: Unauthorized

  /auth/disable:
    put:
      tags:
        - Auth
      summary: Disable Account
      description: Disable a user account
      responses:
        "200":
          description: Account disabled
        "401":
          description: Unauthorized

  /auth/delete:
    delete:
      tags:
        - Auth
      summary: Delete Account
      description: Delete a user account
      responses:
        "200":
          description: Account deleted
        "401":
          description: Unauthorized

  /auth/is-valid:
    get:
      tags:
        - Auth
      summary: Check if token is valid
      description: Checks if the provided token is valid
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token
      responses:
        200:
          description: Token verification status
          content:
            application/json:
              schema:
                type: object
                properties:
                  isVerified:
                    type: boolean
        401:
          description: Token is missing
        403:
          description: Token is not valid
        404:
          description: User not found
        500:
          description: Internal Server Error

  /resend-verification-email:
    post:
      tags:
        - Auth
      summary: Resend verification email
      description: Resends a verification email to a user if the user is found and has not been verified yet.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                  description: The email address of the user to whom the verification email will be sent.
      responses:
        "200":
          description: Verification email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Verification email sent
                    description: Success message indicating the verification email was sent.
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid email format
                    description: Error message for invalid email or already verified email.
        "404":
          description: User Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
                    description: Error message when the user is not found in the database.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Server error
                    description: Error message indicating a server error occurred.

  /notifications:
    post:
      tags:
        - Notifications
      summary: Create a new notification
      name: createNotification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "New Message"
                message:
                  type: string
                  example: "You have a new message."
                userId:
                  type: string
                  example: "60d21b4667d0d8992e610c85"
      responses:
        "201":
          description: Notification created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notification"
        "400":
          description: Bad request
        "500":
          description: Internal server error

    get:
      tags:
        - Notifications
      summary: Get all notifications with pagination
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination (default is 1)
      responses:
        "200":
          description: A paginated list of notifications
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalItems:
                    type: integer
                    example: 100
                  currentPage:
                    type: integer
                    example: 1
                  totalPages:
                    type: integer
                    example: 4
                  notifications:
                    type: array
                    items:
                      $ref: "#/components/schemas/Notification"
        "500":
          description: Internal server error

  /notifications/{id}:
    get:
      tags:
        - Notifications
      summary: Get a notification by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the notification
      responses:
        "200":
          description: The requested notification
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notification"
        "404":
          description: Notification not found
        "500":
          description: Internal server error

    patch:
      tags:
        - Notifications
      summary: Mark notification as read
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the notification to be marked as read
      responses:
        "200":
          description: Notification marked as read
        "404":
          description: Notification not found
        "500":
          description: Internal server error

    delete:
      tags:
        - Notifications
      summary: Delete a notification by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the notification
      responses:
        "200":
          description: Notification deleted
        "404":
          description: Notification not found
        "500":
          description: Internal server error
  /profile:
    post:
      tags:
        - Profile
      summary: Create a new profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
      responses:
        201:
          description: Profile created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        400:
          description: Bad request
        500:
          description: Error creating profile

    get:
      tags:
        - Profile
      summary: Get profiles with pagination
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
          description: Page number for pagination
      responses:
        200:
          description: Profiles fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  profiles:
                    type: array
                    items:
                      $ref: "#/components/schemas/Profile"
                  currentPage:
                    type: integer
                  totalPages:
                    type: integer
        500:
          description: Error fetching profiles

  /profile/search:
    get:
      tags:
        - Profile
      summary: Search profiles based on queries
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: username
          required: false
          schema:
            type: string
          description: Username to search for
        - in: query
          name: email
          required: false
          schema:
            type: string
          description: Email to search for
        # Add other query parameters as needed
      responses:
        200:
          description: Profiles fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Profile"
        500:
          description: Error searching profiles

  /profile/{userId}:
    get:
      tags:
        - Profile
      summary: Get profile by user ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: User ID of the profile to fetch
      responses:
        200:
          description: Profile fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        404:
          description: Profile not found
        500:
          description: Error fetching profile

    put:
      tags:
        - Profile
      summary: Update profile
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: User ID of the profile to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                profileImage:
                  type: string
                # Add other fields as needed
      responses:
        200:
          description: Profile updated successfully
        400:
          description: Bad request
        404:
          description: Profile not found
        500:
          description: Error updating profile

    delete:
      tags:
        - Profile
      summary: Delete profile
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: User ID of the profile to delete
      responses:
        200:
          description: Profile deleted successfully
        404:
          description: Profile not found
        500:
          description: Error deleting profile

  /profile/{userId}/upload:
    post:
      tags:
        - Profile
      summary: Upload profile image
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: User ID of the profile to update
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        200:
          description: Profile image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  urls:
                    type: array
                    items:
                      type: string
        400:
          description: Bad request
        500:
          description: Error uploading profile image

  /auth/signup/emailandpassword:
    post:
      tags:
        - Auth
      summary: User Signup
      description: Signup a new user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                role:
                  type: string
              required:
                - email
                - password
                - role
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "400":
          description: Invalid input
        "409":
          description: Email already registered

  /:
    get:
      summary: Performs a ping request
      tags: [Ping]
      responses:
        200:
          description: Returns pong

  /status:
    get:
      summary: Get server status
      tags: [Ping]
      responses:
        200:
          description: Returns server status

  /request-logs:
    get:
      summary: Get request logs
      tags: [Ping]
      responses:
        200:
          description: Returns request logs
        500:
          description: Error reading request logs

  /app-logs:
    get:
      summary: Get application logs
      tags: [Ping]
      responses:
        200:
          description: Returns application logs
        500:
          description: Error reading application logs

  /clear-request-logs:
    get:
      summary: Clear request logs
      tags: [Ping]
      responses:
        200:
          description: Request logs cleared
        500:
          description: Error clearing request logs

  /clear-app-logs:
    get:
      summary: Clear application logs
      tags: [Ping]
      responses:
        200:
          description: Application logs cleared
        500:
          description: Error clearing application logs
  /messages:
    post:
      summary: Post a new customer message
      tags: [CustomerSupport]
      description: Receive a new message from a customer and save it to the database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: customer@example.com
                message:
                  type: string
                  example: I have an issue with my order.
              required:
                - email
                - message
      responses:
        "201":
          description: Message received successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Message received successfully
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid email format
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Server error

    get:
      summary: Retrieve customer messages
      tags: [CustomerSupport]
      description: Retrieve a list of customer messages with optional filtering.
      parameters:
        - name: replied
          in: query
          description: Filter messages by whether they have been replied to.
          schema:
            type: boolean
        - name: startDate
          in: query
          description: Filter messages created on or after this date (ISO 8601 format).
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: Filter messages created on or before this date (ISO 8601 format).
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: List of customer messages
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    email:
                      type: string
                    message:
                      type: string
                    created:
                      type: string
                      format: date-time
                    replied:
                      type: boolean
        "400":
          description: Invalid query parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid startDate format
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Server error

  /messages/{messageId}/reply:
    post:
      summary: Reply to a customer message
      tags: [CustomerSupport]
      security:
        - bearerAuth: []
      description: Admin replies to a customer message and updates the message status to replied.
      parameters:
        - name: messageId
          in: path
          required: true
          description: ID of the message to reply to
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                replyMessage:
                  type: string
                  example: Thank you for reaching out. Your issue has been addressed.
              required:
                - replyMessage
      responses:
        "200":
          description: Reply sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Reply sent successfully
        "404":
          description: Message not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Message not found
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Server error

  /service-order:
    post:
      summary: Create a new service order
      tags: [ServiceOrder]
      description: Create a new service order. Requires authentication.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - packageType
              properties:
                name:
                  type: string
                  example: "webDevelopment"
                packageType:
                  type: string
                  enum: [regular, standard, premium]
                  example: "standard"
                client:
                  type: string
                  format: uuid
                  example: "64a1fbb3c28d4f0012b8e1f2"
                userEmail:
                  type: string
                  format: email
                  example: "user@example.com"
      responses:
        "201":
          description: Service order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Service order created successfully"
                  serviceOrder:
                    type: object
        "401":
          description: Unauthorized - Missing or invalid token
        "500":
          description: Server error
    get:
      summary: Get all service orders with filtering and pagination
      tags: [ServiceOrder]
      description: Retrieve a list of service orders with optional query filters.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            example: 1
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
        - in: query
          name: client
          schema:
            type: string
            format: uuid
          example: "64a1fbb3c28d4f0012b8e1f2"
      responses:
        "200":
          description: Successfully retrieved service orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalPages:
                    type: integer
                    example: 5
                  currentPage:
                    type: integer
                    example: 1
                  serviceOrders:
                    type: array
                    items:
                      type: object
        "500":
          description: Server error

  /service-order/{id}:
    get:
      summary: Get a specific service order by ID
      tags: [ServiceOrder]
      description: Retrieve a service order by its ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          example: "64a1fbb3c28d4f0012b8e1f2"
      responses:
        "200":
          description: Successfully retrieved service order
          content:
            application/json:
              schema:
                type: object
                properties:
                  serviceOrder:
                    type: object
        "404":
          description: Service order not found
        "500":
          description: Server error

    put:
      summary: Update a specific service order by ID
      tags: [ServiceOrder]
      description: Update details of an existing service order. Requires authentication.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          example: "64a1fbb3c28d4f0012b8e1f2"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                paymentMethod:
                  type: string
                  example: "credit_card"
                preferredCommunicationChannel:
                  type: string
                  enum: [email, phone, whatsapp]
                  example: "email"
                projectName:
                  type: string
                  example: "New Website Development"
                estimatedDeliveryDate:
                  type: string
                  format: date
                  example: "2024-08-15"
      responses:
        "200":
          description: Successfully updated service order
        "400":
          description: Bad request - Invalid input
        "401":
          description: Unauthorized
        "500":
          description: Server error

    delete:
      summary: Delete a specific service order by ID
      tags: [ServiceOrder]
      description: Delete a service order. Requires authentication.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          example: "64a1fbb3c28d4f0012b8e1f2"
      responses:
        "200":
          description: Successfully deleted service order
        "404":
          description: Service order not found
        "401":
          description: Unauthorized
        "500":
          description: Server error

  /bootcamp:
    post:
      summary: Register for a Bootcamp
      description: Creates a new bootcamp registration.
      tags:
        - Bootcamp
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - start
                - end
              properties:
                name:
                  type: string
                  example: "Frontend Bootcamp"
                start:
                  type: string
                  format: date
                  example: "2024-08-15"
                end:
                  type: string
                  format: date
                  example: "2024-09-15"
      responses:
        201:
          description: Bootcamp registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Bootcamp registration successful"
                  registration:
                    $ref: "#/components/schemas/Bootcamp"
        500:
          description: Error registering for bootcamp

    get:
      summary: Get all Bootcamp Registrations
      description: Fetches a paginated list of bootcamp registrations with optional filters.
      tags:
        - Bootcamp
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            example: 30
        - name: name
          in: query
          description: Filter by bootcamp name (case-insensitive)
          required: false
          schema:
            type: string
        - name: student
          in: query
          description: Filter by student ID
          required: false
          schema:
            type: string
        - name: paymentStatus
          in: query
          description: Filter by payment status (unpaid, pending, paid)
          required: false
          schema:
            type: string
      responses:
        200:
          description: List of bootcamp registrations
          content:
            application/json:
              schema:
                type: object
                properties:
                  registrations:
                    type: array
                    items:
                      $ref: "#/components/schemas/Bootcamp"
                  currentPage:
                    type: integer
                  totalPages:
                    type: integer
        500:
          description: Error fetching registrations

  /bootcamp/{id}:
    get:
      summary: Get Bootcamp Registration by ID
      description: Fetches details of a specific bootcamp registration.
      tags:
        - Bootcamp
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the bootcamp registration
          schema:
            type: string
      responses:
        200:
          description: Bootcamp registration found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bootcamp"
        404:
          description: Registration not found
        500:
          description: Error fetching registration

    put:
      summary: Update Bootcamp Registration
      description: Updates payment details for a bootcamp registration.
      tags:
        - Bootcamp
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the bootcamp registration
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                paymentId:
                  type: string
                  example: "PAY12345XYZ"
                paymentStatus:
                  type: string
                  enum: ["unpaid", "pending", "paid"]
                  example: "paid"
      responses:
        200:
          description: Registration updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Registration updated"
                  updatedRegistration:
                    $ref: "#/components/schemas/Bootcamp"
        404:
          description: Registration not found
        500:
          description: Error updating registration

    delete:
      summary: Delete Bootcamp Registration
      description: Deletes a specific bootcamp registration.
      tags:
        - Bootcamp
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the bootcamp registration
          schema:
            type: string
      responses:
        200:
          description: Registration deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Registration deleted successfully"
        404:
          description: Registration not found
        500:
          description: Error deleting registration

  /transactions:
    post:
      summary: Create a new transaction
      security:
        - bearerAuth: []
      tags:
        - Transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transaction"
      responses:
        "201":
          description: Transaction created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  transaction:
                    $ref: "#/components/schemas/Transaction"
        "400":
          description: Missing required fields
        "500":
          description: Internal server error

    get:
      summary: Get all transactions
      security:
        - bearerAuth: []
      tags:
        - Transactions
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
          description: Number of transactions per page
        - in: query
          name: userEmail
          schema:
            type: string
          description: Filter by user email
        - in: query
          name: paymentMethod
          schema:
            type: string
          description: Filter by payment method
        - in: query
          name: paid
          schema:
            type: string
            enum: [unpaid, pending, paid]
          description: Filter by payment status
      responses:
        "200":
          description: List of transactions
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      $ref: "#/components/schemas/Transaction"
                  currentPage:
                    type: integer
                  totalPages:
                    type: integer
        "500":
          description: Internal server error

  /transactions/{id}:
    get:
      summary: Get a transaction by ID
      security:
        - bearerAuth: []
      tags:
        - Transactions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Transaction ID
      responses:
        "200":
          description: Transaction details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "404":
          description: Transaction not found
        "500":
          description: Internal server error

    put:
      summary: Update a transaction
      security:
        - bearerAuth: []
      tags:
        - Transactions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Transaction ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transaction"
      responses:
        "200":
          description: Transaction updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  updatedTransaction:
                    $ref: "#/components/schemas/Transaction"
        "404":
          description: Transaction not found
        "500":
          description: Internal server error

    delete:
      summary: Delete a transaction
      security:
        - bearerAuth: []
      tags:
        - Transactions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Transaction ID
      responses:
        "200":
          description: Transaction deleted successfully
        "404":
          description: Transaction not found
        "500":
          description: Internal server error
