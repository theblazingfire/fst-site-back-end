[
  {
    "tags": ["Auth"],
    "summary": "User Login",
    "description": "Login a user with email and password",
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "email": { "type": "string", "format": "email" },
              "password": { "type": "string" },
              "role": { "type": "string", "enum": ["user", "admin"] }
            },
            "required": ["email", "password", "role"]
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Login successful",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "token": { "type": "string" } }
            }
          }
        }
      },
      "400": { "description": "Invalid input" },
      "401": { "description": "Unauthorized" }
    },
    "method": "post",
    "path": "/auth/login",
    "baseUrl": "http://localhost:8080"
  },
  {
    "tags": ["Auth"],
    "summary": "Forgot Password",
    "description": "Request a password reset link",
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": { "email": { "type": "string", "format": "email" } },
            "required": ["email"]
          }
        }
      }
    },
    "responses": {
      "200": { "description": "Reset link sent" },
      "400": { "description": "Invalid input" },
      "404": { "description": "Email not found" }
    },
    "method": "post",
    "path": "/auth/forgot-password",
    "baseUrl": "http://localhost:8080"
  },
  {
    "tags": ["Auth"],
    "summary": "Reset Password",
    "description": "Reset the password using a reset token",
    "parameters": [
      {
        "name": "resetToken",
        "in": "query",
        "required": true,
        "schema": { "type": "string" }
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": { "newPassword": { "type": "string" } },
            "required": ["newPassword"]
          }
        }
      }
    },
    "responses": {
      "200": { "description": "Password reset successful" },
      "400": { "description": "Invalid input" },
      "401": { "description": "Invalid or expired reset token" }
    },
    "method": "post",
    "path": "/auth/reset-password",
    "baseUrl": "http://localhost:8080"
  },
  {
    "tags": ["Auth"],
    "summary": "Update User Details",
    "description": "Update email, password, and recovery email",
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "email": { "type": "string", "format": "email" },
              "password": { "type": "string" },
              "recoveryEmail": { "type": "string", "format": "email" }
            }
          }
        }
      }
    },
    "responses": {
      "200": { "description": "User details updated" },
      "400": { "description": "Invalid input" },
      "401": { "description": "Unauthorized" }
    },
    "method": "put",
    "path": "/auth/update",
    "baseUrl": "http://localhost:8080"
  },
  {
    "tags": ["Auth"],
    "summary": "Disable Account",
    "description": "Disable a user account",
    "responses": {
      "200": { "description": "Account disabled" },
      "401": { "description": "Unauthorized" }
    },
    "method": "put",
    "path": "/auth/disable",
    "baseUrl": "http://localhost:8080"
  },
  {
    "tags": ["Auth"],
    "summary": "Delete Account",
    "description": "Delete a user account",
    "responses": {
      "200": { "description": "Account deleted" },
      "401": { "description": "Unauthorized" }
    },
    "method": "delete",
    "path": "/auth/delete",
    "baseUrl": "http://localhost:8080"
  },
  {
    "tags": ["Auth"],
    "summary": "Check if token is valid",
    "description": "Checks if the provided token is valid",
    "parameters": [
      {
        "name": "Authorization",
        "in": "header",
        "required": true,
        "schema": { "type": "string" },
        "description": "Bearer token"
      }
    ],
    "responses": {
      "200": {
        "description": "Token verification status",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "isVerified": { "type": "boolean" } }
            }
          }
        }
      },
      "401": { "description": "Token is missing" },
      "403": { "description": "Token is not valid" },
      "404": { "description": "User not found" },
      "500": { "description": "Internal Server Error" }
    },
    "method": "get",
    "path": "/auth/is-valid",
    "baseUrl": "http://localhost:8080"
  },
  {
    "tags": ["Auth"],
    "summary": "Resend verification email",
    "description": "Resends a verification email to a user if the user is found and has not been verified yet.",
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "format": "email",
                "example": "user@example.com",
                "description": "The email address of the user to whom the verification email will be sent."
              }
            }
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Verification email sent successfully",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Verification email sent",
                  "description": "Success message indicating the verification email was sent."
                }
              }
            }
          }
        }
      },
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Invalid email format",
                  "description": "Error message for invalid email or already verified email."
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "User Not Found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "User not found",
                  "description": "Error message when the user is not found in the database."
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Server error",
                  "description": "Error message indicating a server error occurred."
                }
              }
            }
          }
        }
      }
    },
    "method": "post",
    "path": "/resend-verification-email",
    "baseUrl": "http://localhost:8080"
  },
  {
    "tags": ["Notifications"],
    "summary": "Create a new notification",
    "name": "createNotification",
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "title": { "type": "string", "example": "New Message" },
              "message": {
                "type": "string",
                "example": "You have a new message."
              },
              "userId": {
                "type": "string",
                "example": "60d21b4667d0d8992e610c85"
              }
            }
          }
        }
      }
    },
    "responses": {
      "201": {
        "description": "Notification created successfully",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Notification" }
          }
        }
      },
      "400": { "description": "Bad request" },
      "500": { "description": "Internal server error" }
    },
    "method": "post",
    "path": "/notifications",
    "baseUrl": "http://localhost:8080"
  },
  {
    "tags": ["Notifications"],
    "summary": "Get all notifications with pagination",
    "parameters": [
      {
        "in": "query",
        "name": "page",
        "schema": { "type": "integer", "default": 1 },
        "description": "Page number for pagination (default is 1)"
      }
    ],
    "responses": {
      "200": {
        "description": "A paginated list of notifications",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "totalItems": { "type": "integer", "example": 100 },
                "currentPage": { "type": "integer", "example": 1 },
                "totalPages": { "type": "integer", "example": 4 },
                "notifications": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Notification" }
                }
              }
            }
          }
        }
      },
      "500": { "description": "Internal server error" }
    },
    "method": "get",
    "path": "/notifications",
    "baseUrl": "http://localhost:8080"
  },
  {
    "tags": ["Notifications"],
    "summary": "Get a notification by ID",
    "parameters": [
      {
        "in": "path",
        "name": "id",
        "required": true,
        "schema": { "type": "string" },
        "description": "The ID of the notification"
      }
    ],
    "responses": {
      "200": {
        "description": "The requested notification",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Notification" }
          }
        }
      },
      "404": { "description": "Notification not found" },
      "500": { "description": "Internal server error" }
    },
    "method": "get",
    "path": "/notifications/{id}",
    "baseUrl": "http://localhost:8080"
  },
  {
    "tags": ["Notifications"],
    "summary": "Mark notification as read",
    "parameters": [
      {
        "in": "path",
        "name": "id",
        "required": true,
        "schema": { "type": "string" },
        "description": "The ID of the notification to be marked as read"
      }
    ],
    "responses": {
      "200": { "description": "Notification marked as read" },
      "404": { "description": "Notification not found" },
      "500": { "description": "Internal server error" }
    },
    "method": "patch",
    "path": "/notifications/{id}",
    "baseUrl": "http://localhost:8080"
  },
  {
    "tags": ["Notifications"],
    "summary": "Delete a notification by ID",
    "parameters": [
      {
        "in": "path",
        "name": "id",
        "required": true,
        "schema": { "type": "string" },
        "description": "The ID of the notification"
      }
    ],
    "responses": {
      "200": { "description": "Notification deleted" },
      "404": { "description": "Notification not found" },
      "500": { "description": "Internal server error" }
    },
    "method": "delete",
    "path": "/notifications/{id}",
    "baseUrl": "http://localhost:8080"
  },
  {
    "tags": ["Profile"],
    "summary": "Create a new profile",
    "security": [{ "bearerAuth": [] }],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": { "$ref": "#/components/schemas/Profile" }
        }
      }
    },
    "responses": {
      "201": {
        "description": "Profile created successfully",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Profile" }
          }
        }
      },
      "400": { "description": "Bad request" },
      "500": { "description": "Error creating profile" }
    },
    "method": "post",
    "path": "/profile",
    "baseUrl": "http://localhost:8080"
  },
  {
    "tags": ["Profile"],
    "summary": "Get profiles with pagination",
    "security": [{ "bearerAuth": [] }],
    "parameters": [
      {
        "in": "query",
        "name": "page",
        "required": false,
        "schema": { "type": "integer" },
        "description": "Page number for pagination"
      }
    ],
    "responses": {
      "200": {
        "description": "Profiles fetched successfully",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "profiles": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Profile" }
                },
                "currentPage": { "type": "integer" },
                "totalPages": { "type": "integer" }
              }
            }
          }
        }
      },
      "500": { "description": "Error fetching profiles" }
    },
    "method": "get",
    "path": "/profile",
    "baseUrl": "http://localhost:8080"
  },
  {
    "tags": ["Profile"],
    "summary": "Search profiles based on queries",
    "security": [{ "bearerAuth": [] }],
    "parameters": [
      {
        "in": "query",
        "name": "username",
        "required": false,
        "schema": { "type": "string" },
        "description": "Username to search for"
      },
      {
        "in": "query",
        "name": "email",
        "required": false,
        "schema": { "type": "string" },
        "description": "Email to search for"
      }
    ],
    "responses": {
      "200": {
        "description": "Profiles fetched successfully",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/Profile" }
            }
          }
        }
      },
      "500": { "description": "Error searching profiles" }
    },
    "method": "get",
    "path": "/profile/search",
    "baseUrl": "http://localhost:8080"
  },
  {
    "tags": ["Profile"],
    "summary": "Get profile by user ID",
    "security": [{ "bearerAuth": [] }],
    "parameters": [
      {
        "in": "path",
        "name": "userId",
        "required": true,
        "schema": { "type": "string" },
        "description": "User ID of the profile to fetch"
      }
    ],
    "responses": {
      "200": {
        "description": "Profile fetched successfully",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Profile" }
          }
        }
      },
      "404": { "description": "Profile not found" },
      "500": { "description": "Error fetching profile" }
    },
    "method": "get",
    "path": "/profile/{userId}",
    "baseUrl": "http://localhost:8080"
  },
  {
    "tags": ["Profile"],
    "summary": "Update profile",
    "security": [{ "bearerAuth": [] }],
    "parameters": [
      {
        "in": "path",
        "name": "userId",
        "required": true,
        "schema": { "type": "string" },
        "description": "User ID of the profile to update"
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "username": { "type": "string" },
              "email": { "type": "string" },
              "profileImage": { "type": "string" }
            }
          }
        }
      }
    },
    "responses": {
      "200": { "description": "Profile updated successfully" },
      "400": { "description": "Bad request" },
      "404": { "description": "Profile not found" },
      "500": { "description": "Error updating profile" }
    },
    "method": "put",
    "path": "/profile/{userId}",
    "baseUrl": "http://localhost:8080"
  },
  {
    "tags": ["Profile"],
    "summary": "Delete profile",
    "security": [{ "bearerAuth": [] }],
    "parameters": [
      {
        "in": "path",
        "name": "userId",
        "required": true,
        "schema": { "type": "string" },
        "description": "User ID of the profile to delete"
      }
    ],
    "responses": {
      "200": { "description": "Profile deleted successfully" },
      "404": { "description": "Profile not found" },
      "500": { "description": "Error deleting profile" }
    },
    "method": "delete",
    "path": "/profile/{userId}",
    "baseUrl": "http://localhost:8080"
  },
  {
    "tags": ["Profile"],
    "summary": "Upload profile image",
    "security": [{ "bearerAuth": [] }],
    "parameters": [
      {
        "in": "path",
        "name": "userId",
        "required": true,
        "schema": { "type": "string" },
        "description": "User ID of the profile to update"
      }
    ],
    "requestBody": {
      "content": {
        "multipart/form-data": {
          "schema": {
            "type": "object",
            "properties": {
              "files": {
                "type": "array",
                "items": { "type": "string", "format": "binary" }
              }
            }
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Profile image uploaded successfully",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "urls": { "type": "array", "items": { "type": "string" } }
              }
            }
          }
        }
      },
      "400": { "description": "Bad request" },
      "500": { "description": "Error uploading profile image" }
    },
    "method": "post",
    "path": "/profile/{userId}/upload",
    "baseUrl": "http://localhost:8080"
  },
  {
    "tags": ["Auth"],
    "summary": "User Signup",
    "description": "Signup a new user with email and password",
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "email": { "type": "string", "format": "email" },
              "password": { "type": "string" },
              "role": { "type": "string" }
            },
            "required": ["email", "password", "role"]
          }
        }
      }
    },
    "responses": {
      "201": {
        "description": "User created successfully",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "token": { "type": "string" } }
            }
          }
        }
      },
      "400": { "description": "Invalid input" },
      "409": { "description": "Email already registered" }
    },
    "method": "post",
    "path": "/auth/signup/emailandpassword",
    "baseUrl": "http://localhost:8080"
  },
  {
    "summary": "Performs a ping request",
    "tags": ["Ping"],
    "responses": { "200": { "description": "Returns pong" } },
    "method": "get",
    "path": "/",
    "baseUrl": "http://localhost:8080"
  },
  {
    "summary": "Get server status",
    "tags": ["Ping"],
    "responses": { "200": { "description": "Returns server status" } },
    "method": "get",
    "path": "/status",
    "baseUrl": "http://localhost:8080"
  },
  {
    "summary": "Get request logs",
    "tags": ["Ping"],
    "responses": {
      "200": { "description": "Returns request logs" },
      "500": { "description": "Error reading request logs" }
    },
    "method": "get",
    "path": "/request-logs",
    "baseUrl": "http://localhost:8080"
  },
  {
    "summary": "Get application logs",
    "tags": ["Ping"],
    "responses": {
      "200": { "description": "Returns application logs" },
      "500": { "description": "Error reading application logs" }
    },
    "method": "get",
    "path": "/app-logs",
    "baseUrl": "http://localhost:8080"
  },
  {
    "summary": "Clear request logs",
    "tags": ["Ping"],
    "responses": {
      "200": { "description": "Request logs cleared" },
      "500": { "description": "Error clearing request logs" }
    },
    "method": "get",
    "path": "/clear-request-logs",
    "baseUrl": "http://localhost:8080"
  },
  {
    "summary": "Clear application logs",
    "tags": ["Ping"],
    "responses": {
      "200": { "description": "Application logs cleared" },
      "500": { "description": "Error clearing application logs" }
    },
    "method": "get",
    "path": "/clear-app-logs",
    "baseUrl": "http://localhost:8080"
  },
  {
    "summary": "Post a new customer message",
    "tags": ["CustomerSupport"],
    "description": "Receive a new message from a customer and save it to the database.",
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "format": "email",
                "example": "customer@example.com"
              },
              "message": {
                "type": "string",
                "example": "I have an issue with my order."
              }
            },
            "required": ["email", "message"]
          }
        }
      }
    },
    "responses": {
      "201": {
        "description": "Message received successfully",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Message received successfully"
                }
              }
            }
          }
        }
      },
      "400": {
        "description": "Invalid input",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Invalid email format"
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Server error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string", "example": "Server error" }
              }
            }
          }
        }
      }
    },
    "method": "post",
    "path": "/messages",
    "baseUrl": "http://localhost:8080"
  },
  {
    "summary": "Retrieve customer messages",
    "tags": ["CustomerSupport"],
    "description": "Retrieve a list of customer messages with optional filtering.",
    "parameters": [
      {
        "name": "replied",
        "in": "query",
        "description": "Filter messages by whether they have been replied to.",
        "schema": { "type": "boolean" }
      },
      {
        "name": "startDate",
        "in": "query",
        "description": "Filter messages created on or after this date (ISO 8601 format).",
        "schema": { "type": "string", "format": "date-time" }
      },
      {
        "name": "endDate",
        "in": "query",
        "description": "Filter messages created on or before this date (ISO 8601 format).",
        "schema": { "type": "string", "format": "date-time" }
      }
    ],
    "responses": {
      "200": {
        "description": "List of customer messages",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "_id": { "type": "string" },
                  "email": { "type": "string" },
                  "message": { "type": "string" },
                  "created": { "type": "string", "format": "date-time" },
                  "replied": { "type": "boolean" }
                }
              }
            }
          }
        }
      },
      "400": {
        "description": "Invalid query parameters",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Invalid startDate format"
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Server error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string", "example": "Server error" }
              }
            }
          }
        }
      }
    },
    "method": "get",
    "path": "/messages",
    "baseUrl": "http://localhost:8080"
  },
  {
    "summary": "Reply to a customer message",
    "tags": ["CustomerSupport"],
    "security": [{ "bearerAuth": [] }],
    "description": "Admin replies to a customer message and updates the message status to replied.",
    "parameters": [
      {
        "name": "messageId",
        "in": "path",
        "required": true,
        "description": "ID of the message to reply to",
        "schema": { "type": "string" }
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "replyMessage": {
                "type": "string",
                "example": "Thank you for reaching out. Your issue has been addressed."
              }
            },
            "required": ["replyMessage"]
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Reply sent successfully",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Reply sent successfully"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Message not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string", "example": "Message not found" }
              }
            }
          }
        }
      },
      "500": {
        "description": "Server error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string", "example": "Server error" }
              }
            }
          }
        }
      }
    },
    "method": "post",
    "path": "/messages/{messageId}/reply",
    "baseUrl": "http://localhost:8080"
  },
  {
    "summary": "Create a new service order",
    "tags": ["ServiceOrder"],
    "description": "Create a new service order. Requires authentication.",
    "security": [{ "bearerAuth": [] }],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "required": ["name", "packageType"],
            "properties": {
              "name": { "type": "string", "example": "webDevelopment" },
              "packageType": {
                "type": "string",
                "enum": ["regular", "standard", "premium"],
                "example": "standard"
              },
              "client": {
                "type": "string",
                "format": "uuid",
                "example": "64a1fbb3c28d4f0012b8e1f2"
              },
              "userEmail": {
                "type": "string",
                "format": "email",
                "example": "user@example.com"
              }
            }
          }
        }
      }
    },
    "responses": {
      "201": {
        "description": "Service order created successfully",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Service order created successfully"
                },
                "serviceOrder": { "type": "object" }
              }
            }
          }
        }
      },
      "401": { "description": "Unauthorized - Missing or invalid token" },
      "500": { "description": "Server error" }
    },
    "method": "post",
    "path": "/service-order",
    "baseUrl": "http://localhost:8080"
  },
  {
    "summary": "Get all service orders with filtering and pagination",
    "tags": ["ServiceOrder"],
    "description": "Retrieve a list of service orders with optional query filters.",
    "parameters": [
      {
        "in": "query",
        "name": "page",
        "schema": { "type": "integer", "example": 1 }
      },
      {
        "in": "query",
        "name": "limit",
        "schema": { "type": "integer", "example": 10 }
      },
      {
        "in": "query",
        "name": "client",
        "schema": { "type": "string", "format": "uuid" },
        "example": "64a1fbb3c28d4f0012b8e1f2"
      }
    ],
    "responses": {
      "200": {
        "description": "Successfully retrieved service orders",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "totalPages": { "type": "integer", "example": 5 },
                "currentPage": { "type": "integer", "example": 1 },
                "serviceOrders": {
                  "type": "array",
                  "items": { "type": "object" }
                }
              }
            }
          }
        }
      },
      "500": { "description": "Server error" }
    },
    "method": "get",
    "path": "/service-order",
    "baseUrl": "http://localhost:8080"
  },
  {
    "summary": "Get a specific service order by ID",
    "tags": ["ServiceOrder"],
    "description": "Retrieve a service order by its ID.",
    "parameters": [
      {
        "in": "path",
        "name": "id",
        "required": true,
        "schema": { "type": "string", "format": "uuid" },
        "example": "64a1fbb3c28d4f0012b8e1f2"
      }
    ],
    "responses": {
      "200": {
        "description": "Successfully retrieved service order",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": { "serviceOrder": { "type": "object" } }
            }
          }
        }
      },
      "404": { "description": "Service order not found" },
      "500": { "description": "Server error" }
    },
    "method": "get",
    "path": "/service-order/{id}",
    "baseUrl": "http://localhost:8080"
  },
  {
    "summary": "Update a specific service order by ID",
    "tags": ["ServiceOrder"],
    "description": "Update details of an existing service order. Requires authentication.",
    "security": [{ "bearerAuth": [] }],
    "parameters": [
      {
        "in": "path",
        "name": "id",
        "required": true,
        "schema": { "type": "string", "format": "uuid" },
        "example": "64a1fbb3c28d4f0012b8e1f2"
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "paymentMethod": { "type": "string", "example": "credit_card" },
              "preferredCommunicationChannel": {
                "type": "string",
                "enum": ["email", "phone", "whatsapp"],
                "example": "email"
              },
              "projectName": {
                "type": "string",
                "example": "New Website Development"
              },
              "estimatedDeliveryDate": {
                "type": "string",
                "format": "date",
                "example": "2024-08-15"
              }
            }
          }
        }
      }
    },
    "responses": {
      "200": { "description": "Successfully updated service order" },
      "400": { "description": "Bad request - Invalid input" },
      "401": { "description": "Unauthorized" },
      "500": { "description": "Server error" }
    },
    "method": "put",
    "path": "/service-order/{id}",
    "baseUrl": "http://localhost:8080"
  },
  {
    "summary": "Delete a specific service order by ID",
    "tags": ["ServiceOrder"],
    "description": "Delete a service order. Requires authentication.",
    "security": [{ "bearerAuth": [] }],
    "parameters": [
      {
        "in": "path",
        "name": "id",
        "required": true,
        "schema": { "type": "string", "format": "uuid" },
        "example": "64a1fbb3c28d4f0012b8e1f2"
      }
    ],
    "responses": {
      "200": { "description": "Successfully deleted service order" },
      "401": { "description": "Unauthorized" },
      "404": { "description": "Service order not found" },
      "500": { "description": "Server error" }
    },
    "method": "delete",
    "path": "/service-order/{id}",
    "baseUrl": "http://localhost:8080"
  },
  {
    "summary": "Register for a Bootcamp",
    "description": "Creates a new bootcamp registration.",
    "tags": ["Bootcamp"],
    "security": [{ "BearerAuth": [] }],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "required": ["name", "start", "end"],
            "properties": {
              "name": { "type": "string", "example": "Frontend Bootcamp" },
              "start": {
                "type": "string",
                "format": "date",
                "example": "2024-08-15"
              },
              "end": {
                "type": "string",
                "format": "date",
                "example": "2024-09-15"
              }
            }
          }
        }
      }
    },
    "responses": {
      "201": {
        "description": "Bootcamp registration successful",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Bootcamp registration successful"
                },
                "registration": { "$ref": "#/components/schemas/Bootcamp" }
              }
            }
          }
        }
      },
      "500": { "description": "Error registering for bootcamp" }
    },
    "method": "post",
    "path": "/bootcamp",
    "baseUrl": "http://localhost:8080"
  },
  {
    "summary": "Get all Bootcamp Registrations",
    "description": "Fetches a paginated list of bootcamp registrations with optional filters.",
    "tags": ["Bootcamp"],
    "parameters": [
      {
        "name": "page",
        "in": "query",
        "description": "Page number for pagination",
        "required": false,
        "schema": { "type": "integer", "example": 1 }
      },
      {
        "name": "limit",
        "in": "query",
        "description": "Number of items per page",
        "required": false,
        "schema": { "type": "integer", "example": 30 }
      },
      {
        "name": "name",
        "in": "query",
        "description": "Filter by bootcamp name (case-insensitive)",
        "required": false,
        "schema": { "type": "string" }
      },
      {
        "name": "student",
        "in": "query",
        "description": "Filter by student ID",
        "required": false,
        "schema": { "type": "string" }
      },
      {
        "name": "paymentStatus",
        "in": "query",
        "description": "Filter by payment status (unpaid, pending, paid)",
        "required": false,
        "schema": { "type": "string" }
      }
    ],
    "responses": {
      "200": {
        "description": "List of bootcamp registrations",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "registrations": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Bootcamp" }
                },
                "currentPage": { "type": "integer" },
                "totalPages": { "type": "integer" }
              }
            }
          }
        }
      },
      "500": { "description": "Error fetching registrations" }
    },
    "method": "get",
    "path": "/bootcamp",
    "baseUrl": "http://localhost:8080"
  },
  {
    "summary": "Get Bootcamp Registration by ID",
    "description": "Fetches details of a specific bootcamp registration.",
    "tags": ["Bootcamp"],
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "ID of the bootcamp registration",
        "schema": { "type": "string" }
      }
    ],
    "responses": {
      "200": {
        "description": "Bootcamp registration found",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Bootcamp" }
          }
        }
      },
      "404": { "description": "Registration not found" },
      "500": { "description": "Error fetching registration" }
    },
    "method": "get",
    "path": "/bootcamp/{id}",
    "baseUrl": "http://localhost:8080"
  },
  {
    "summary": "Update Bootcamp Registration",
    "description": "Updates payment details for a bootcamp registration.",
    "tags": ["Bootcamp"],
    "security": [{ "BearerAuth": [] }],
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "ID of the bootcamp registration",
        "schema": { "type": "string" }
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "paymentId": { "type": "string", "example": "PAY12345XYZ" },
              "paymentStatus": {
                "type": "string",
                "enum": ["unpaid", "pending", "paid"],
                "example": "paid"
              }
            }
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Registration updated",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Registration updated"
                },
                "updatedRegistration": {
                  "$ref": "#/components/schemas/Bootcamp"
                }
              }
            }
          }
        }
      },
      "404": { "description": "Registration not found" },
      "500": { "description": "Error updating registration" }
    },
    "method": "put",
    "path": "/bootcamp/{id}",
    "baseUrl": "http://localhost:8080"
  },
  {
    "summary": "Delete Bootcamp Registration",
    "description": "Deletes a specific bootcamp registration.",
    "tags": ["Bootcamp"],
    "security": [{ "BearerAuth": [] }],
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "ID of the bootcamp registration",
        "schema": { "type": "string" }
      }
    ],
    "responses": {
      "200": {
        "description": "Registration deleted successfully",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Registration deleted successfully"
                }
              }
            }
          }
        }
      },
      "404": { "description": "Registration not found" },
      "500": { "description": "Error deleting registration" }
    },
    "method": "delete",
    "path": "/bootcamp/{id}",
    "baseUrl": "http://localhost:8080"
  },
  {
    "summary": "Create a new transaction",
    "security": [{ "bearerAuth": [] }],
    "tags": ["Transactions"],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": { "$ref": "#/components/schemas/Transaction" }
        }
      }
    },
    "responses": {
      "201": {
        "description": "Transaction created successfully",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string" },
                "transaction": { "$ref": "#/components/schemas/Transaction" }
              }
            }
          }
        }
      },
      "400": { "description": "Missing required fields" },
      "500": { "description": "Internal server error" }
    },
    "method": "post",
    "path": "/transactions",
    "baseUrl": "http://localhost:8080"
  },
  {
    "summary": "Get all transactions",
    "security": [{ "bearerAuth": [] }],
    "tags": ["Transactions"],
    "parameters": [
      {
        "in": "query",
        "name": "page",
        "schema": { "type": "integer" },
        "description": "Page number for pagination"
      },
      {
        "in": "query",
        "name": "limit",
        "schema": { "type": "integer" },
        "description": "Number of transactions per page"
      },
      {
        "in": "query",
        "name": "userEmail",
        "schema": { "type": "string" },
        "description": "Filter by user email"
      },
      {
        "in": "query",
        "name": "paymentMethod",
        "schema": { "type": "string" },
        "description": "Filter by payment method"
      },
      {
        "in": "query",
        "name": "paid",
        "schema": { "type": "string", "enum": ["unpaid", "pending", "paid"] },
        "description": "Filter by payment status"
      }
    ],
    "responses": {
      "200": {
        "description": "List of transactions",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "transactions": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Transaction" }
                },
                "currentPage": { "type": "integer" },
                "totalPages": { "type": "integer" }
              }
            }
          }
        }
      },
      "500": { "description": "Internal server error" }
    },
    "method": "get",
    "path": "/transactions",
    "baseUrl": "http://localhost:8080"
  },
  {
    "summary": "Get a transaction by ID",
    "security": [{ "bearerAuth": [] }],
    "tags": ["Transactions"],
    "parameters": [
      {
        "in": "path",
        "name": "id",
        "required": true,
        "schema": { "type": "string" },
        "description": "Transaction ID"
      }
    ],
    "responses": {
      "200": {
        "description": "Transaction details",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Transaction" }
          }
        }
      },
      "404": { "description": "Transaction not found" },
      "500": { "description": "Internal server error" }
    },
    "method": "get",
    "path": "/transactions/{id}",
    "baseUrl": "http://localhost:8080"
  },
  {
    "summary": "Update a transaction",
    "security": [{ "bearerAuth": [] }],
    "tags": ["Transactions"],
    "parameters": [
      {
        "in": "path",
        "name": "id",
        "required": true,
        "schema": { "type": "string" },
        "description": "Transaction ID"
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": { "$ref": "#/components/schemas/Transaction" }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Transaction updated successfully",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string" },
                "updatedTransaction": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          }
        }
      },
      "404": { "description": "Transaction not found" },
      "500": { "description": "Internal server error" }
    },
    "method": "put",
    "path": "/transactions/{id}",
    "baseUrl": "http://localhost:8080"
  },
  {
    "summary": "Delete a transaction",
    "security": [{ "bearerAuth": [] }],
    "tags": ["Transactions"],
    "parameters": [
      {
        "in": "path",
        "name": "id",
        "required": true,
        "schema": { "type": "string" },
        "description": "Transaction ID"
      }
    ],
    "responses": {
      "200": { "description": "Transaction deleted successfully" },
      "404": { "description": "Transaction not found" },
      "500": { "description": "Internal server error" }
    },
    "method": "delete",
    "path": "/transactions/{id}",
    "baseUrl": "http://localhost:8080"
  }
]
