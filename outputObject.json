{
  "Auth": {
    "postAuthLogin": {
      "functionBody": "/**\n   * User Login\n   * Tags: Auth\n   * Method: POST\n   * Path: /auth/login\n   * Responses: 200, 400, 401\n   */\n\n  postAuthLogin: async (email, password, role) => {\n    if(typeof email !== 'string'){\n                throw new Error(\"Argument 'email' should be of type string in the email format\")\n                } if(typeof password !== 'string'){\n                throw new Error(\"Argument 'password' should be of type string \")\n                } if(typeof role !== 'string'){\n                throw new Error(\"Argument 'role' should be of type string \")\n                }\n      \n    \n  let config = {\n    url: `https://fstbackend.com/auth/login`,\n    method: 'post',\n    headers: {\n    'Content-Type': 'application/json' , \n    },\n    data: {email:`${email}`,password:`${password}`,role:`${role}`}\n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in postAuthLogin:\", error);\n      throw error;\n    }\n  }",
      "args": ["email", "password", "role"]
    },
    "postAuthForgotpassword": {
      "functionBody": "/**\n   * Forgot Password\n   * Tags: Auth\n   * Method: POST\n   * Path: /auth/forgot-password\n   * Responses: 200, 400, 404\n   */\n\n  postAuthForgotpassword: async (email) => {\n    if(typeof email !== 'string'){\n                throw new Error(\"Argument 'email' should be of type string in the email format\")\n                }\n      \n    \n  let config = {\n    url: `https://fstbackend.com/auth/forgot-password`,\n    method: 'post',\n    headers: {\n    'Content-Type': 'application/json' , \n    },\n    data: {email:`${email}`}\n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in postAuthForgotpassword:\", error);\n      throw error;\n    }\n  }",
      "args": ["email"]
    },
    "postAuthResetpassword": {
      "functionBody": "/**\n   * Reset Password\n   * Tags: Auth\n   * Method: POST\n   * Path: /auth/reset-password\n   * Responses: 200, 400, 401\n   */\n\n  postAuthResetpassword: async (resetToken, newPassword) => {\n    if(typeof resetToken !== 'string'){\n            throw new Error(\"Argument 'resetToken' should be of type string \")\n            } if(typeof newPassword !== 'string'){\n                throw new Error(\"Argument 'newPassword' should be of type string \")\n                }\n      \n    \n  let config = {\n    url: `https://fstbackend.com/auth/reset-password?resetToken=${encodeURIComponent(resetToken)}`,\n    method: 'post',\n    headers: {\n    'Content-Type': 'application/json' , \n    },\n    data: {newPassword:`${newPassword}`}\n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in postAuthResetpassword:\", error);\n      throw error;\n    }\n  }",
      "args": ["resetToken", "newPassword"]
    },
    "putAuthUpdate": {
      "functionBody": "/**\n   * Update User Details\n   * Tags: Auth\n   * Method: PUT\n   * Path: /auth/update\n   * Responses: 200, 400, 401\n   */\n\n  putAuthUpdate: async (email, password, recoveryEmail) => {\n    if(typeof email !== 'string'){\n                throw new Error(\"Argument 'email' should be of type string in the email format\")\n                } if(typeof password !== 'string'){\n                throw new Error(\"Argument 'password' should be of type string \")\n                } if(typeof recoveryEmail !== 'string'){\n                throw new Error(\"Argument 'recoveryEmail' should be of type string in the email format\")\n                }\n      \n    \n  let config = {\n    url: `https://fstbackend.com/auth/update`,\n    method: 'put',\n    headers: {\n    'Content-Type': 'application/json' , \n    },\n    data: {email:`${email}`,password:`${password}`,recoveryEmail:`${recoveryEmail}`}\n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in putAuthUpdate:\", error);\n      throw error;\n    }\n  }",
      "args": ["email", "password", "recoveryEmail"]
    },
    "putAuthDisable": {
      "functionBody": "/**\n   * Disable Account\n   * Tags: Auth\n   * Method: PUT\n   * Path: /auth/disable\n   * Responses: 200, 401\n   */\n\n  putAuthDisable: async () => {\n    \n      \n    \n  let config = {\n    url: `https://fstbackend.com/auth/disable`,\n    method: 'put',\n    headers: {\n      \n    },\n    \n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in putAuthDisable:\", error);\n      throw error;\n    }\n  }",
      "args": []
    },
    "deleteAuthDelete": {
      "functionBody": "/**\n   * Delete Account\n   * Tags: Auth\n   * Method: DELETE\n   * Path: /auth/delete\n   * Responses: 200, 401\n   */\n\n  deleteAuthDelete: async () => {\n    \n      \n    \n  let config = {\n    url: `https://fstbackend.com/auth/delete`,\n    method: 'delete',\n    headers: {\n      \n    },\n    \n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in deleteAuthDelete:\", error);\n      throw error;\n    }\n  }",
      "args": []
    },
    "getAuthIsvalid": {
      "functionBody": "/**\n   * Check if token is valid\n   * Tags: Auth\n   * Method: GET\n   * Path: /auth/is-valid\n   * Responses: 200, 401, 403, 404, 500\n   */\n\n  getAuthIsvalid: async () => {\n    \n      \n    \n  let config = {\n    url: `https://fstbackend.com/auth/is-valid`,\n    method: 'get',\n    headers: {\n      \n    },\n    \n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in getAuthIsvalid:\", error);\n      throw error;\n    }\n  }",
      "args": []
    },
    "postResendverificationemail": {
      "functionBody": "/**\n   * Resend verification email\n   * Tags: Auth\n   * Method: POST\n   * Path: /resend-verification-email\n   * Responses: 200, 400, 404, 500\n   */\n\n  postResendverificationemail: async (email) => {\n    if(typeof email !== 'string'){\n                throw new Error(\"Argument 'email' should be of type string in the email format\")\n                }\n      \n    \n  let config = {\n    url: `https://fstbackend.com/resend-verification-email`,\n    method: 'post',\n    headers: {\n    'Content-Type': 'application/json' , \n    },\n    data: {email:`${email}`}\n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in postResendverificationemail:\", error);\n      throw error;\n    }\n  }",
      "args": ["email"]
    },
    "postAuthSignupEmailandpassword": {
      "functionBody": "/**\n   * User Signup\n   * Tags: Auth\n   * Method: POST\n   * Path: /auth/signup/emailandpassword\n   * Responses: 201, 400, 409\n   */\n\n  postAuthSignupEmailandpassword: async (email, password, role) => {\n    if(typeof email !== 'string'){\n                throw new Error(\"Argument 'email' should be of type string in the email format\")\n                } if(typeof password !== 'string'){\n                throw new Error(\"Argument 'password' should be of type string \")\n                } if(typeof role !== 'string'){\n                throw new Error(\"Argument 'role' should be of type string \")\n                }\n      \n    \n  let config = {\n    url: `https://fstbackend.com/auth/signup/emailandpassword`,\n    method: 'post',\n    headers: {\n    'Content-Type': 'application/json' , \n    },\n    data: {email:`${email}`,password:`${password}`,role:`${role}`}\n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in postAuthSignupEmailandpassword:\", error);\n      throw error;\n    }\n  }",
      "args": ["email", "password", "role"]
    }
  },
  "Notifications": {
    "createNotification": {
      "functionBody": "/**\n   * Create a new notification\n   * Tags: Notifications\n   * Method: POST\n   * Path: /notifications\n   * Responses: 201, 400, 500\n   */\n\n  createNotification: async (title, message, userId) => {\n    if(typeof title !== 'string'){\n                throw new Error(\"Argument 'title' should be of type string \")\n                } if(typeof message !== 'string'){\n                throw new Error(\"Argument 'message' should be of type string \")\n                } if(typeof userId !== 'string'){\n                throw new Error(\"Argument 'userId' should be of type string \")\n                }\n      \n    \n  let config = {\n    url: `https://fstbackend.com/notifications`,\n    method: 'post',\n    headers: {\n    'Content-Type': 'application/json' , \n    },\n    data: {title:`${title}`,message:`${message}`,userId:`${userId}`}\n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in createNotification:\", error);\n      throw error;\n    }\n  }",
      "args": ["title", "message", "userId"]
    },
    "getNotifications": {
      "functionBody": "/**\n   * Get all notifications with pagination\n   * Tags: Notifications\n   * Method: GET\n   * Path: /notifications\n   * Responses: 200, 500\n   */\n\n  getNotifications: async (page) => {\n    if(typeof page !== 'number'){\n            throw new Error(\"Argument 'page' should be of type integer \")\n            }\n      \n    \n  let config = {\n    url: `https://fstbackend.com/notifications?page=${encodeURIComponent(page)}`,\n    method: 'get',\n    headers: {\n      \n    },\n    \n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in getNotifications:\", error);\n      throw error;\n    }\n  }",
      "args": ["page"]
    },
    "getNotificationsById": {
      "functionBody": "/**\n   * Get a notification by ID\n   * Tags: Notifications\n   * Method: GET\n   * Path: /notifications/{id}\n   * Responses: 200, 404, 500\n   */\n\n  getNotificationsById: async (id) => {\n    if(typeof id !== 'string'){\n              throw new Error(\"Argument 'id' should be of type string \")\n              }\n      \n    \n  let config = {\n    url: `https://fstbackend.com/notifications/${id}`,\n    method: 'get',\n    headers: {\n      \n    },\n    \n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in getNotificationsById:\", error);\n      throw error;\n    }\n  }",
      "args": ["id"]
    },
    "patchNotificationsById": {
      "functionBody": "/**\n   * Mark notification as read\n   * Tags: Notifications\n   * Method: PATCH\n   * Path: /notifications/{id}\n   * Responses: 200, 404, 500\n   */\n\n  patchNotificationsById: async (id) => {\n    if(typeof id !== 'string'){\n              throw new Error(\"Argument 'id' should be of type string \")\n              }\n      \n    \n  let config = {\n    url: `https://fstbackend.com/notifications/${id}`,\n    method: 'patch',\n    headers: {\n      \n    },\n    \n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in patchNotificationsById:\", error);\n      throw error;\n    }\n  }",
      "args": ["id"]
    },
    "deleteNotificationsById": {
      "functionBody": "/**\n   * Delete a notification by ID\n   * Tags: Notifications\n   * Method: DELETE\n   * Path: /notifications/{id}\n   * Responses: 200, 404, 500\n   */\n\n  deleteNotificationsById: async (id) => {\n    if(typeof id !== 'string'){\n              throw new Error(\"Argument 'id' should be of type string \")\n              }\n      \n    \n  let config = {\n    url: `https://fstbackend.com/notifications/${id}`,\n    method: 'delete',\n    headers: {\n      \n    },\n    \n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in deleteNotificationsById:\", error);\n      throw error;\n    }\n  }",
      "args": ["id"]
    }
  },
  "Profile": {
    "postProfile": {
      "functionBody": "/**\n   * Create a new profile\n   * Tags: Profile\n   * Method: POST\n   * Path: /profile\n   * Responses: 201, 400, 500\n   */\n\n  postProfile: async (token) => {\n    if(typeof token !== 'string'){\n            throw new Error(\"Argument 'token' should be of type string\")\n            }\n      \n    \n  let config = {\n    url: `https://fstbackend.com/profile`,\n    method: 'post',\n    headers: {\n    'Content-Type': 'application/json' , 'Authorization': `Bearer ${token}`\n    },\n    data: {}\n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in postProfile:\", error);\n      throw error;\n    }\n  }",
      "args": ["token"]
    },
    "getProfile": {
      "functionBody": "/**\n   * Get profiles with pagination\n   * Tags: Profile\n   * Method: GET\n   * Path: /profile\n   * Responses: 200, 500\n   */\n\n  getProfile: async (token, page) => {\n    if(typeof token !== 'string'){\n            throw new Error(\"Argument 'token' should be of type string\")\n            } if(typeof page !== 'number'){\n            throw new Error(\"Argument 'page' should be of type integer \")\n            }\n      \n    \n  let config = {\n    url: `https://fstbackend.com/profile?page=${encodeURIComponent(page)}`,\n    method: 'get',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    \n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in getProfile:\", error);\n      throw error;\n    }\n  }",
      "args": ["token", "page"]
    },
    "getProfileSearch": {
      "functionBody": "/**\n   * Search profiles based on queries\n   * Tags: Profile\n   * Method: GET\n   * Path: /profile/search\n   * Responses: 200, 500\n   */\n\n  getProfileSearch: async (token, username, email) => {\n    if(typeof token !== 'string'){\n            throw new Error(\"Argument 'token' should be of type string\")\n            } if(typeof username !== 'string'){\n            throw new Error(\"Argument 'username' should be of type string \")\n            } if(typeof email !== 'string'){\n            throw new Error(\"Argument 'email' should be of type string \")\n            }\n      \n    \n  let config = {\n    url: `https://fstbackend.com/profile/search?username=${encodeURIComponent(username)}&email=${encodeURIComponent(email)}`,\n    method: 'get',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    \n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in getProfileSearch:\", error);\n      throw error;\n    }\n  }",
      "args": ["token", "username", "email"]
    },
    "getProfileByUserId": {
      "functionBody": "/**\n   * Get profile by user ID\n   * Tags: Profile\n   * Method: GET\n   * Path: /profile/{userId}\n   * Responses: 200, 404, 500\n   */\n\n  getProfileByUserId: async (token, userId) => {\n    if(typeof token !== 'string'){\n            throw new Error(\"Argument 'token' should be of type string\")\n            } if(typeof userId !== 'string'){\n              throw new Error(\"Argument 'userId' should be of type string \")\n              }\n      \n    \n  let config = {\n    url: `https://fstbackend.com/profile/${userId}`,\n    method: 'get',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    \n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in getProfileByUserId:\", error);\n      throw error;\n    }\n  }",
      "args": ["token", "userId"]
    },
    "putProfileByUserId": {
      "functionBody": "/**\n   * Update profile\n   * Tags: Profile\n   * Method: PUT\n   * Path: /profile/{userId}\n   * Responses: 200, 400, 404, 500\n   */\n\n  putProfileByUserId: async (token, userId, username, email, profileImage) => {\n    if(typeof token !== 'string'){\n            throw new Error(\"Argument 'token' should be of type string\")\n            } if(typeof userId !== 'string'){\n              throw new Error(\"Argument 'userId' should be of type string \")\n              } if(typeof username !== 'string'){\n                throw new Error(\"Argument 'username' should be of type string \")\n                } if(typeof email !== 'string'){\n                throw new Error(\"Argument 'email' should be of type string \")\n                } if(typeof profileImage !== 'string'){\n                throw new Error(\"Argument 'profileImage' should be of type string \")\n                }\n      \n    \n  let config = {\n    url: `https://fstbackend.com/profile/${userId}`,\n    method: 'put',\n    headers: {\n    'Content-Type': 'application/json' , 'Authorization': `Bearer ${token}`\n    },\n    data: {username:`${username}`,email:`${email}`,profileImage:`${profileImage}`}\n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in putProfileByUserId:\", error);\n      throw error;\n    }\n  }",
      "args": ["token", "userId", "username", "email", "profileImage"]
    },
    "deleteProfileByUserId": {
      "functionBody": "/**\n   * Delete profile\n   * Tags: Profile\n   * Method: DELETE\n   * Path: /profile/{userId}\n   * Responses: 200, 404, 500\n   */\n\n  deleteProfileByUserId: async (token, userId) => {\n    if(typeof token !== 'string'){\n            throw new Error(\"Argument 'token' should be of type string\")\n            } if(typeof userId !== 'string'){\n              throw new Error(\"Argument 'userId' should be of type string \")\n              }\n      \n    \n  let config = {\n    url: `https://fstbackend.com/profile/${userId}`,\n    method: 'delete',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    \n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in deleteProfileByUserId:\", error);\n      throw error;\n    }\n  }",
      "args": ["token", "userId"]
    },
    "postProfileByUserIdUpload": {
      "functionBody": "/**\n   * Upload profile image\n   * Tags: Profile\n   * Method: POST\n   * Path: /profile/{userId}/upload\n   * Responses: 200, 400, 500\n   */\n\n  postProfileByUserIdUpload: async (token, userId, files) => {\n    if(typeof token !== 'string'){\n            throw new Error(\"Argument 'token' should be of type string\")\n            } if(typeof userId !== 'string'){\n              throw new Error(\"Argument 'userId' should be of type string \")\n              } if(!Array.isArray(files) && !files.every(item => item instanceof File)){\n                throw new Error(\"Argument 'files' should be of type array and the items should be of the type in the {'type':'array','items':{'type':'string','format':'binary'}} format\")\n                }\n      \n  let formData = new FormData();files.forEach((x) => {\n  formData.append(\"files\", x); // Add each file to the \"files\" key\n});\n    \n  let config = {\n    url: `https://fstbackend.com/profile/${userId}/upload`,\n    method: 'post',\n    headers: {\n    'Content-Type': 'multipart/form-data' , 'Authorization': `Bearer ${token}`\n    },\n    data: formData \n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in postProfileByUserIdUpload:\", error);\n      throw error;\n    }\n  }",
      "args": ["token", "userId", "files"]
    }
  },
  "Ping": {
    "get": {
      "functionBody": "/**\n   * Performs a ping request\n   * Tags: Ping\n   * Method: GET\n   * Path: /\n   * Responses: 200\n   */\n\n  get: async () => {\n    \n      \n    \n  let config = {\n    url: `https://fstbackend.com/`,\n    method: 'get',\n    headers: {\n      \n    },\n    \n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in get:\", error);\n      throw error;\n    }\n  }",
      "args": []
    },
    "getStatus": {
      "functionBody": "/**\n   * Get server status\n   * Tags: Ping\n   * Method: GET\n   * Path: /status\n   * Responses: 200\n   */\n\n  getStatus: async () => {\n    \n      \n    \n  let config = {\n    url: `https://fstbackend.com/status`,\n    method: 'get',\n    headers: {\n      \n    },\n    \n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in getStatus:\", error);\n      throw error;\n    }\n  }",
      "args": []
    },
    "getRequestlogs": {
      "functionBody": "/**\n   * Get request logs\n   * Tags: Ping\n   * Method: GET\n   * Path: /request-logs\n   * Responses: 200, 500\n   */\n\n  getRequestlogs: async () => {\n    \n      \n    \n  let config = {\n    url: `https://fstbackend.com/request-logs`,\n    method: 'get',\n    headers: {\n      \n    },\n    \n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in getRequestlogs:\", error);\n      throw error;\n    }\n  }",
      "args": []
    },
    "getApplogs": {
      "functionBody": "/**\n   * Get application logs\n   * Tags: Ping\n   * Method: GET\n   * Path: /app-logs\n   * Responses: 200, 500\n   */\n\n  getApplogs: async () => {\n    \n      \n    \n  let config = {\n    url: `https://fstbackend.com/app-logs`,\n    method: 'get',\n    headers: {\n      \n    },\n    \n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in getApplogs:\", error);\n      throw error;\n    }\n  }",
      "args": []
    },
    "getClearrequestlogs": {
      "functionBody": "/**\n   * Clear request logs\n   * Tags: Ping\n   * Method: GET\n   * Path: /clear-request-logs\n   * Responses: 200, 500\n   */\n\n  getClearrequestlogs: async () => {\n    \n      \n    \n  let config = {\n    url: `https://fstbackend.com/clear-request-logs`,\n    method: 'get',\n    headers: {\n      \n    },\n    \n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in getClearrequestlogs:\", error);\n      throw error;\n    }\n  }",
      "args": []
    },
    "getClearapplogs": {
      "functionBody": "/**\n   * Clear application logs\n   * Tags: Ping\n   * Method: GET\n   * Path: /clear-app-logs\n   * Responses: 200, 500\n   */\n\n  getClearapplogs: async () => {\n    \n      \n    \n  let config = {\n    url: `https://fstbackend.com/clear-app-logs`,\n    method: 'get',\n    headers: {\n      \n    },\n    \n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in getClearapplogs:\", error);\n      throw error;\n    }\n  }",
      "args": []
    }
  },
  "CustomerSupport": {
    "postMessages": {
      "functionBody": "/**\n   * Post a new customer message\n   * Tags: CustomerSupport\n   * Method: POST\n   * Path: /messages\n   * Responses: 201, 400, 500\n   */\n\n  postMessages: async (email, message) => {\n    if(typeof email !== 'string'){\n                throw new Error(\"Argument 'email' should be of type string in the email format\")\n                } if(typeof message !== 'string'){\n                throw new Error(\"Argument 'message' should be of type string \")\n                }\n      \n    \n  let config = {\n    url: `https://fstbackend.com/messages`,\n    method: 'post',\n    headers: {\n    'Content-Type': 'application/json' , \n    },\n    data: {email:`${email}`,message:`${message}`}\n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in postMessages:\", error);\n      throw error;\n    }\n  }",
      "args": ["email", "message"]
    },
    "getMessages": {
      "functionBody": "/**\n   * Retrieve customer messages\n   * Tags: CustomerSupport\n   * Method: GET\n   * Path: /messages\n   * Responses: 200, 400, 500\n   */\n\n  getMessages: async (replied, startDate, endDate) => {\n    if(typeof replied !== 'boolean'){\n            throw new Error(\"Argument 'replied' should be of type boolean \")\n            } if(typeof startDate !== 'string'){\n            throw new Error(\"Argument 'startDate' should be of type string in the date-time format\")\n            } if(typeof endDate !== 'string'){\n            throw new Error(\"Argument 'endDate' should be of type string in the date-time format\")\n            }\n      \n    \n  let config = {\n    url: `https://fstbackend.com/messages?replied=${encodeURIComponent(replied)}&startDate=${encodeURIComponent(startDate)}&endDate=${encodeURIComponent(endDate)}`,\n    method: 'get',\n    headers: {\n      \n    },\n    \n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in getMessages:\", error);\n      throw error;\n    }\n  }",
      "args": ["replied", "startDate", "endDate"]
    },
    "postMessagesByMessageIdReply": {
      "functionBody": "/**\n   * Reply to a customer message\n   * Tags: CustomerSupport\n   * Method: POST\n   * Path: /messages/{messageId}/reply\n   * Responses: 200, 404, 500\n   */\n\n  postMessagesByMessageIdReply: async (token, messageId, replyMessage) => {\n    if(typeof token !== 'string'){\n            throw new Error(\"Argument 'token' should be of type string\")\n            } if(typeof messageId !== 'string'){\n              throw new Error(\"Argument 'messageId' should be of type string \")\n              } if(typeof replyMessage !== 'string'){\n                throw new Error(\"Argument 'replyMessage' should be of type string \")\n                }\n      \n    \n  let config = {\n    url: `https://fstbackend.com/messages/${messageId}/reply`,\n    method: 'post',\n    headers: {\n    'Content-Type': 'application/json' , 'Authorization': `Bearer ${token}`\n    },\n    data: {replyMessage:`${replyMessage}`}\n  };\n  \n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error in postMessagesByMessageIdReply:\", error);\n      throw error;\n    }\n  }",
      "args": ["token", "messageId", "replyMessage"]
    }
  }
}
